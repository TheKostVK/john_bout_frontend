import React, { useState } from "react";
import { Button, Form, Input, Select, Row, Col, Divider } from "antd";
import { MinusCircleOutlined, PlusOutlined } from "@ant-design/icons";

const { Option } = Select;

interface Characteristic {
    [key: string]: string;
}

interface Product {
    name: string;
    product_type: string;
    subtype: string;
    characteristics: Characteristic[];
    imgUrl: string;
}

interface Props {
    isCreate: boolean;
    initialValues?: Product;
}

/**
 *   "Боеприпасы различного калибра": ["5.45x39 мм", "7.62x39 мм", "7.62x54 ммR", "9x19 мм", "9x21 мм", "12.7x108 мм", "12.7x55 мм", "14.5x114 мм", "23x115 мм"],
 *     "Ракеты класса воздух-земля": ["Х-29Л", "Х-29ТД", "Х-38МЛ", "Х-25МТ", "Х-31П", "Х-31А", "Х-35", "Х-55", "Х-59М", "Х-59МК2", "Х-58УШЭ", "Х-38", "Х-29Т", "Х-31П", "Х-32", "Х-59MK2", "Х-59MK2Э", "Х-25MT", "Х-31А", "Х-31П", "Х-35"],
 *     "Ракеты класса воздух-воздух": ["Р-27", "Р-27Т", "Р-27Э", "Р-27ЭТ", "Р-60", "Р-60М", "Р-73", "Р-73М", "Р-77", "Р-77М", "Р-74", "Р-74М", "Р-74М2", "Р-27Э", "Р-27ЭТ", "Р-73", "Р-73М", "Р-74", "Р-74М", "Р-77", "Р-77М"],
 *     "Ракеты класса земля-воздух": ["9М311", "9М311-1", "9М311-1E", "9М311-1F", "9М330-2", "9М331-2", "9М331-3", "9М333-2", "9М333-3", "9М338-2", "9М342-2", "9М342-3", "9М311-2", "9М311-2E", "9М311-2F"],
 *     "Межконтинентальные ракеты": ["РС-24", "РС-26", "РС-28", "Р-36", "Р-36M", "РС-18", "РС-18B", "РС-18U", "РС-18У", "РС-20", "РС-20Б", "РС-20В", "РС-20ВЫ", "РС-20К", "РС-20КВ", "РС-20П", "РС-20ПВ", "РС-20Р", "РС-20РВ", "РС-20У", "РС-20УВ", "РС-22", "РС-22А", "РС-22Б", "РС-22Г", "РС-24", "РС-24А", "РС-24Б", "РС-24В", "РС-24Г", "РС-28", "РС-28А", "РС-28Б", "РС-28В", "РС-28Г"]
 */

// Подтипы вооружений
const typeToSubtypes: Record<string, string[]> = {
    "Оружие": ["Тактические винтовки", "Штурмовые винтовки", "Пистолеты-пулеметы", "Пистолеты", "Ручные пулеметы", "Снайперские и пехотные винтовки"],
    "Военные самолеты": [
        "Истребители",
        "Бомбардировщики",
        "Разведчики",
        "Транспортные самолеты",
        "Беспилотные летательные аппараты (БПЛА)",
        "Разведывательные вертолеты",
        "Ударные вертолеты",
        "Патрульные самолеты",
        "Специальные самолеты (например, для борьбы с беспилотниками)",
        "Учебно-тренировочные самолеты",
        "Танкеры (для воздушной дозаправки)",
        "Эвакуационные самолеты"
    ],
    "Тяжелая техника": [
        "Ракетные комплексы",
        "РСЗО",
        "Бронетранспортеры",
        "Танки",
        "Бронеавтомобили",
        "Самоходные артиллерийские установки",
        "Тяжелые гаубицы",
        "Тяжелые минометы",
        "Разведывательные машины",
        "Инженерная техника"
    ],
    "Амуниция": [
        "Бронежилеты стандартного уровня защиты",
        "Бронежилеты с улучшенной защитой",
        "Бронежилеты с керамическими пластинами",
        "Бронежилеты для общевойсковых подразделений",
        "Бронежилеты для специальных операций (ССО)",
        "Кевларовые бронежилеты",
        "Тканевые бронежилеты",
        "Летные бронежилеты для летного состава",
        "Бронежилеты для бронетехники",
        "Каски боевые стандартного уровня защиты",
        "Каски боевые с улучшенной защитой",
        "Каски боевые с интегрированными коммуникационными средствами",
        "Каски боевые для общевойсковых подразделений",
        "Каски боевые для специальных операций (ССО)",
        "Каски боевые для танкистов",
        "Каски боевые для пилотов",
        "Каски боевые для десантников",
        "Гранаты дымовые",
        "Гранаты осколочные",
        "Гранаты огнемётные",
        "Гранаты штурмовые",
        "Гранаты светозвуковые",
        "Гранаты противотанковые",
        "Гранаты реактивные",
        "Гранаты ударные",
        "Гранаты газовые",
    ],
    "Боеприпасы различного калибра": [
        "Патроны калибра 5,45 мм",
        "Патроны калибра 7,62 мм",
        "Патроны калибра 12,7 мм",
        "Патроны калибра 14,5 мм",
        "Снаряды калибра 30 мм",
        "Снаряды калибра 85 мм",
        "Снаряды калибра 125 мм",
        "Снаряды калибра 152 мм",
        "Снаряды калибра 203 мм",
        "Снаряды калибра 240 мм",
        "Снаряды калибра 300 мм"
    ],
    "Ракеты класса воздух-земля": [
        "Управляемые авиационные бомбы",
        "Противокорабельные ракеты",
        "Управляемые ракетные комплексы наземного базирования",
        "Ракеты с ИК наведением",
        "Ракеты с радиолокационным наведением",
        "Ракеты с лазерным наведением",
        "Ракеты с ТВ наведением",
        "Ракеты с инерциальным наведением"
    ],
    "Ракеты класса воздух-воздух": [
        "Ближнего радиуса действия с ИК наведением",
        "Ближнего радиуса действия с радиолокационным наведением",
        "Среднего радиуса действия с радиолокационным наведением",
        "Дальнего радиуса действия с радиолокационным наведением",
        "Ракеты с активной радиолокационной головкой",
        "Ракеты с полуактивной радиолокационной головкой",
        "Ракеты с тепловой головкой",
        "Ракеты с радиоволновой головкой"
    ],
    "Ракеты класса земля-воздух": [
        "Зенитные ракетные комплексы с головками самонаведения по радиолокационной разведке (ГСН)",
        "Зенитные ракетные комплексы с головками самонаведения по радару",
        "Зенитные ракетные комплексы с инфракрасными головками самонаведения",
        "Зенитные ракетные комплексы с лазерными головками самонаведения",
        "Переносные зенитные ракетные комплексы с радиолокационным наведением",
        "Стрелково-пушечные зенитные комплексы с головками самонаведения по радару"
    ],
    "Межконтинентальные ракеты": [
        "Баллистические ракеты с одной боеголовкой",
        "Баллистические ракеты с множественными боеголовками",
        "Маневрирующие баллистические ракеты",
        "Баллистические ракеты с ядерным зарядом",
        "Баллистические ракеты с термоядерным зарядом",
        "Баллистические ракеты с конвенциональными боеприпасами",
        "Баллистические ракеты с гиперзвуковыми боеголовками",
        "Межконтинентальные ракеты-носители космических аппаратов",
        "Баллистические ракеты с разделяющимися блоками"
    ]
};

const FormProduct: React.FC<Props> = ({ isCreate = true, initialValues }) => {
    const [form] = Form.useForm();

    const [selectedType, setSelectedType] = useState<string | undefined>(initialValues?.product_type);
    const [subtypes, setSubtypes] = useState<string[]>([]);

    const onFinish = (values: any) => {

    };

    /**
     * Обработчик смены типа товара.
     */
    const handleTypeChange = (value: string): void => {
        setSelectedType(value);
        setSubtypes(typeToSubtypes[value] || []);
        form.setFieldsValue({ subtype: undefined });
    };

    return (
        <>
            <Form
                form={ form }
                onFinish={ onFinish }
                initialValues={ initialValues }
                layout="vertical"
                className={ 'w-full' }
            >
                <Row className={ 'mb-2' } gutter={ [10, 10] }>
                    <Col span={ 8 }>
                        <Form.Item
                            name="name"
                            label="Название"
                            rules={ [{ required: true, message: 'Введите название товара' }] }
                        >
                            <Input placeholder="Название товара"/>
                        </Form.Item>
                    </Col>
                    <Col span={ 6 }>
                        <Form.Item
                            name="product_type"
                            label="Тип"
                            rules={ [{ required: true, message: 'Выберите тип товара' }] }
                        >
                            <Select placeholder="Выберите тип товара" onChange={ handleTypeChange }>
                                { Object.keys(typeToSubtypes).map((type: string) => (
                                    <Option key={ type } value={ type }>{ type }</Option>
                                )) }
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={ 10 }>
                        <Form.Item
                            name="subtype"
                            label="Подтип"
                            rules={ [{ required: true, message: 'Выберите подтип товара' }] }
                        >
                            <Select placeholder="Выберите подтип товара" disabled={ !selectedType }>
                                { selectedType && typeToSubtypes[selectedType].map(subtype => (
                                    <Option key={ subtype } value={ subtype }>{ subtype }</Option>
                                )) }
                            </Select>
                        </Form.Item>
                    </Col>
                </Row>

                <Row className={ 'mb-2' } gutter={ [10, 10] }>
                    <Col span={ 24 }>
                        <Form.Item
                            name="imgUrl"
                            label="URL изображения товара"
                            rules={ [{ required: true, message: 'Введите URL изображения товара' }] }
                        >
                            <Input placeholder="URL изображения товара"/>
                        </Form.Item>
                    </Col>
                </Row>

                <Row className={ 'mb-2' } gutter={ [10, 10] }>
                    <Col span={ 8 }>
                        <Form.Item
                            name="quantity"
                            label="Количество товара на складе"
                            rules={ [{ required: true, message: 'Введите количество товара' }] }
                        >
                            <Input type="number" placeholder="Количество товара"/>
                        </Form.Item>
                    </Col>
                    <Col span={ 8 }>
                        <Form.Item
                            name="occupied_space"
                            label="Занимаемое место товаром"
                            rules={ [{ required: true, message: 'Введите занимаемое место товаром' }] }
                        >
                            <Input type="number" placeholder="Занимаемое место"/>
                        </Form.Item>
                    </Col>
                    <Col span={ 8 }>
                        <Form.Item
                            name="storage_location"
                            label="Склад хранения товара"
                            rules={ [{ required: true, message: 'Введите номер склада для хранения товара' }] }
                        >
                            <Input type="number" placeholder="Номер склада"/>
                        </Form.Item>
                    </Col>
                </Row>

                <Row className={ 'mb-2' } gutter={ [10, 10] }>
                    <Col span={ 8 }>
                        <Form.Item
                            name="production_cost"
                            label="Стоимость производства одной единицы товара"
                            rules={ [{ required: true, message: 'Введите стоимость производства' }] }
                        >
                            <Input type="number" placeholder="Стоимость производства"/>
                        </Form.Item>
                    </Col>
                    <Col span={ 8 }>
                        <Form.Item
                            name="price"
                            label="Стоимость продажи одной единицы товара"
                            rules={ [{ required: true, message: 'Введите стоимость продажи' }] }
                        >
                            <Input type="number" placeholder="Стоимость продажи"/>
                        </Form.Item>
                    </Col>
                    <Col span={ 8 }>

                    </Col>
                </Row>

                <Form.Item
                    name="characteristics"
                    label="Характеристики"
                >
                    <Form.List name="characteristics">
                        { (fields, { add, remove }) => (
                            <>
                                { fields.map(({ key, name, fieldKey = 0, ...restField }) => (
                                    <Form.Item
                                        { ...restField }
                                        key={ fieldKey?.toString() }
                                    >
                                        <Row gutter={ 8 }>
                                            <Col span={ 10 }>
                                                <Form.Item
                                                    name={ [name, 'name'] }
                                                    fieldKey={ [fieldKey, 'name'] }
                                                    noStyle
                                                >
                                                    <Input placeholder="Имя характеристики"/>
                                                </Form.Item>
                                            </Col>
                                            <Col span={ 10 }>
                                                <Form.Item
                                                    name={ [name, 'value'] }
                                                    fieldKey={ [fieldKey, 'value'] }
                                                    noStyle
                                                >
                                                    <Input placeholder="Значение характеристики"/>
                                                </Form.Item>
                                            </Col>
                                            <Col span={ 4 }>
                                                <MinusCircleOutlined onClick={ () => remove(fieldKey) }/>
                                            </Col>
                                        </Row>
                                    </Form.Item>
                                )) }
                                <Form.Item>
                                    <Button
                                        type="dashed"
                                        onClick={ () => add() }
                                        icon={ <PlusOutlined/> }
                                        disabled={ subtypes.length === 0 }
                                    >
                                        Добавить характеристику
                                    </Button>
                                </Form.Item>
                            </>
                        ) }
                    </Form.List>
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit">
                        Создать товар
                    </Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default FormProduct;
